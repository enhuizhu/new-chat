{"version":3,"sources":["services/dbService.js","services/ioService.js","config.js","services/apiService.js","App.js","serviceWorker.js","index.js"],"names":["db","socket","io","IoService","msg","emit","callback","on","config","ApiService","axios","get","this","getUrl","path","concat","request","indexedDB","open","onerror","e","console","error","onsuccess","event","target","result","onupgradeneeded","objectStore","createObjectStore","keyPath","createIndex","unique","transaction","oncomplete","log","DbService","objStore","keyRange","IDBKeyRange","lowerBound","cursorRequest","openCursor","messages","push","value","continue","user_id","message","timestamp","Date","getTime","put","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","sendMessage","bind","assertThisInitialized","onMessage","messageHandler","state","_this2","getUserData","then","res","userInfo","data","initMessages","_this3","fetchMessages","setState","setTimeout","msgObj","JSON","parse","createMsg","inputField","id","_this4","react_default","a","createElement","className","map","index","key","type","placeholder","ref","onClick","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","src_App_0","document","getElementById","process","URL","href","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5ce0a577.chunk.js","sourcesContent":["\r\nconst dbName = 'chat';\r\nconst tableName = 'messages';\r\nconst request = indexedDB.open(dbName, 2);\r\nvar db;\r\n\r\nrequest.onerror = function(e) {\r\n  // Handle errors.\r\n  console.error(e);\r\n};\r\n\r\nrequest.onsuccess = function(event) {\r\n  db = event.target.result;\r\n}\r\n\r\nrequest.onupgradeneeded = function(event) {\r\n  db = event.target.result;\r\n  const objectStore = db.createObjectStore(tableName, { keyPath: 'timestamp' });\r\n\r\n  objectStore.createIndex('user_id', 'user_id', { unique: false });\r\n  objectStore.createIndex('message', 'message', { unique: false });\r\n\r\n  objectStore.transaction.oncomplete = function(event) {\r\n    console.log('transaction done!');\r\n  };\r\n}\r\n\r\nexport default class DbService {\r\n  static fetchMessages(callback) {\r\n    const transaction = db.transaction([tableName], 'readwrite');\r\n    const objStore = transaction.objectStore(tableName);\r\n\r\n    const keyRange = IDBKeyRange.lowerBound(0);\r\n    const cursorRequest = objStore.openCursor(keyRange);\r\n\r\n    const messages = [];\r\n\r\n    transaction.oncomplete = function(e) {\r\n      // Execute the callback function.\r\n      callback(messages);\r\n    };\r\n\r\n    cursorRequest.onsuccess = function(e) {\r\n      const result = e.target.result;\r\n\r\n      if (!!result === false) {\r\n        return;\r\n      }\r\n      messages.push(result.value);\r\n\r\n      result.continue();\r\n    };\r\n\r\n    cursorRequest.onerror = function(e) {\r\n      console.log('cursor error', e);\r\n    }\r\n  }\r\n\r\n  static createMsg(user_id, message, callback) {\r\n    const transaction = db.transaction([tableName], 'readwrite');\r\n\r\n    const objStore = transaction.objectStore(tableName);\r\n\r\n    const timestamp = new Date().getTime();\r\n    const msg = {timestamp, user_id, message};\r\n    const request = objStore.put(msg);\r\n\r\n    request.onsuccess = function(e) {\r\n      callback(msg);\r\n    };\r\n\r\n    request.onerror = function(e) {\r\n      console.error(e);\r\n    };\r\n  }\r\n}","import io from 'socket.io-client';\r\n \r\nconst socket = io('http://localhost:4000');\r\n\r\nexport default class IoService {\r\n  static sendMessage(msg) {\r\n    socket.emit('send', msg);\r\n  }\r\n\r\n  static onMessage(callback) {\r\n    socket.on('receive', (msg) => {\r\n      callback(msg);\r\n    });\r\n  }\r\n}","export const config = {\r\n  api: 'http://localhost:4000'\r\n}\r\n","import { config } from '../config';\r\nimport axios from 'axios'\r\n\r\nexport default class ApiService {\r\n  static getUserData() {\r\n    return axios.get(this.getUrl('user/1234'));\r\n  }\r\n  \r\n  static getUrl(path) {\r\n    return `${config.api}/${path}`;\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport IoService from './services/ioService';\r\nimport ApiService from './services/apiService';\r\nimport DbService from './services/dbService';\r\n\r\n// const customerData = [\r\n//   { ssn: \"444-44-4444\", name: \"Bill\", age: 35, email: \"bill@company.com\" },\r\n//   { ssn: \"555-55-5555\", name: \"Donna\", age: 32, email: \"donna@home.org\" }\r\n// ];\r\n\r\n\r\n// const dbName = \"the_name\";\r\n\r\n// var request = indexedDB.open(dbName, 2);\r\n\r\n// request.onerror = function(event) {\r\n//   // Handle errors.\r\n// };\r\n\r\n// request.onsuccess = function(event) {\r\n//   window.db = event.target.result;\r\n// }\r\n\r\n// request.onupgradeneeded = function(event) {\r\n//   var db = event.target.result;\r\n\r\n//   // Create an objectStore to hold information about our customers. We're\r\n//   // going to use \"ssn\" as our key path because it's guaranteed to be\r\n//   // unique - or at least that's what I was told during the kickoff meeting.\r\n//   var objectStore = db.createObjectStore(\"customers\", { keyPath: \"ssn\" });\r\n\r\n//   // Create an index to search customers by name. We may have duplicates\r\n//   // so we can't use a unique index.\r\n//   objectStore.createIndex(\"name\", \"name\", { unique: false });\r\n\r\n//   // Create an index to search customers by email. We want to ensure that\r\n//   // no two customers have the same email, so use a unique index.\r\n//   objectStore.createIndex(\"email\", \"email\", { unique: true });\r\n\r\n//   // Use transaction oncomplete to make sure the objectStore creation is \r\n//   // finished before adding data into it.\r\n//   objectStore.transaction.oncomplete = function(event) {\r\n//     // Store values in the newly created objectStore.\r\n//     var customerObjectStore = db.transaction(\"customers\", \"readwrite\").objectStore(\"customers\");\r\n//     customerData.forEach(function(customer) {\r\n//       customerObjectStore.add(customer);\r\n//     });\r\n//   };\r\n// };\r\n\r\n// window.fetchTodos = function(callback) {\r\n//   var db =  window.db;\r\n//   var transaction = db.transaction(['customers'], 'readwrite');\r\n//   var objStore = transaction.objectStore('customers');\r\n\r\n//   var keyRange = IDBKeyRange.lowerBound(0);\r\n//   var cursorRequest = objStore.openCursor(keyRange);\r\n\r\n//   var todos = [];\r\n\r\n//   transaction.oncomplete = function(e) {\r\n//     // Execute the callback function.\r\n//     callback(todos);\r\n//   };\r\n\r\n//   cursorRequest.onsuccess = function(e) {\r\n//     var result = e.target.result;\r\n\r\n//     if (!!result == false) {\r\n//       return;\r\n//     }\r\n//     console.log('result value', result.value);\r\n//     todos.push(result.value);\r\n\r\n//     result.continue();\r\n//   };\r\n\r\n//   cursorRequest.onerror = function(e) {\r\n//     console.log('cursor error', e);\r\n//   }\r\n// };\r\n\r\n// window.createTodo = function(text, callback) {\r\n//   // Get a reference to the db.\r\n//   var db = window.db;\r\n\r\n//   // Initiate a new transaction.\r\n//   var transaction = db.transaction(['customers'], 'readwrite');\r\n\r\n//   // Get the datastore.\r\n//   var objStore = transaction.objectStore('customers');\r\n\r\n//   // Create a timestamp for the todo item.\r\n//   var timestamp = new Date().getTime();\r\n\r\n//   // Create an object for the todo item.\r\n//   var todo = { ssn: timestamp, name: \"Bill\", age: 35, email: \"bill@company.comfasff\" };\r\n  \r\n\r\n//   // Create the datastore request.\r\n//   var request = objStore.put(todo);\r\n\r\n//   // Handle a successful datastore put.\r\n//   request.onsuccess = function(e) {\r\n//     // Execute the callback function.\r\n//     callback(todo);\r\n//   };\r\n\r\n//   // Handle errors.\r\n//   request.onerror = function(e) {\r\n//     console.error(e);\r\n//   };\r\n// };\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.sendMessage = this.sendMessage.bind(this);\r\n    \r\n    IoService.onMessage(this.messageHandler.bind(this));\r\n    \r\n    this.state = {\r\n      messages: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    ApiService.getUserData().then(res => {\r\n      this.userInfo = res.data;\r\n    });\r\n\r\n    this.initMessages();\r\n\r\n  }\r\n\r\n  initMessages() {\r\n    try {\r\n      DbService.fetchMessages((messages) => {\r\n        console.log('messages from db', messages);\r\n        this.setState({\r\n          messages: messages\r\n        });\r\n      });\r\n    } catch(e) {\r\n      setTimeout(() => {this.initMessages();}, 100);\r\n    }\r\n  }\r\n\r\n  messageHandler(msg) {\r\n    const msgObj = JSON.parse(msg);\r\n    \r\n    DbService.createMsg(msgObj.user_id, msgObj.message, (res) => {\r\n      console.log('db message', res);\r\n    });\r\n\r\n    this.setState({\r\n      messages: this.state.messages.concat([msgObj])\r\n    });\r\n  }\r\n\r\n  sendMessage() {\r\n    const message = this.inputField.value;\r\n\r\n    if (message === '') {\r\n      return ;\r\n    }\r\n\r\n    this.inputField.value = '';\r\n    \r\n    IoService.sendMessage(\r\n      {\r\n        user_id: this.userInfo.id,\r\n        message: message\r\n      }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"messages\">\r\n          {\r\n            this.state.messages.map((msg, index) => {\r\n              return (<div className=\"item\" key={index}>\r\n                {msg.user_id}: {msg.message}\r\n              </div>);\r\n            })\r\n          }\r\n        </div>\r\n        <div>\r\n          <input type=\"text\" placeholder=\"please type your message here\" ref={(ref) => {\r\n            this.inputField = ref;\r\n          }}></input>\r\n        </div>\r\n        <div>\r\n          <button onClick={this.sendMessage}>Send</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  console.log(process.env.NODE_ENV);\r\n  // if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n  if ('serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker-custom.js`;\r\n      console.log('here');\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\nserviceWorker.register();\r\n"],"sourceRoot":""}